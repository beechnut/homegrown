*
* Grooby aka L-Ruby
* 
*  The Ruby-Processing library for generating plant models
*  driven by Lindenmayer Systems (L-Systems)
*



To Generate a Basic L-System Model

- Download the repository
- Navigate into the repository in Terminal using the cd command. For example, if the repository is inside your Documents folder, type "cd ~/Documents/grooby"
- Start irb, aka Interactive Ruby. Do this by typing "irb" in Terminal
- Load grooby by typing "load 'grooby.rb'" If you see "true", you know it's loaded.
- Create a set of rules to be applied to the L-System by typing "p = ProductionRules.new". Now the variable p is the set of all rules used when rewriting the axiom string, the axiom being the origin of the L-System.
- Generate the data model by typing 
			make_word("F", p, 4)
  The make_word command uses the axiom or starting point as the first parameter, here "F". It uses the rules in the set of production rules "p", which, as you see from the output in irb, default to "F"=>"Ff", and "f"=>"f". The last parameter is the number of times the system rewrites itself, or "n".
  
- Copy and paste the resulting word, denoted either by "p{n}" or "=>" into the value for "@word" in imager.rb. So, if the resulting word is "Fff", you should see '@word = "FFF"'.

- Go back to Terminal. Exit irb by typing "quit".
- Make sure you are still inside /grooby by typing "pwd", which means "Path to the Working Directory". This will tell you your current location in the file structure.

- If you are not in grooby, navigate there. Otherwise, type
			rp5 run imager.rb
	This runs 'imager.rb' as a Processing sketch using the Ruby-Processing library developed by j-ashkenas.

- Your sketch will load as an image.
- To re-run the sketch, make sure to quit out of the Ruby-Processing applet that opens using Apple-Q. The Terminal hangs while Ruby-Processing is running, meaning you can't do anything in that Terminal session/window while the sketch is open.



Classes

Things needed:

Superclass of all types of L-Systems
	Individual types of L-Systems

Species implementing L-Systems
Species implementing models

Productions
	Signal descriptions
		Signal description builder

Graphics and UI
 Plant a seed
 Advance a step
 Reverse a step
 Use a seed so steps back and forward are consistent
 / Move a branch, bind branches --> these operations would occur on the model word
 / Then translates the model word to models


MILESTONES in 2012

Generate a production word from an axiom and a set of productions, n steps.
	REACHED: 18 July 2012 2:28 am

Generate a bracketed (to be branched) production word from an axiom and a set of productions, n steps.
	REACHED: 18 July 2012 2:28 am (same program, brackets don't make a difference in rewriting yet)

Display a 2D model based on a word.
	REACHED: 18 July 2012 11:55 am (only rotates in one direction),
	UPDATED: 18 July 2012 12:18 pm (rotates in multiple directions)

Display a 3D model based on a word.
	REACHED: 18 July 13:45 pm (not looking great yet but it does produce 3D)
	UPDATED: -- ---- ------- (TODO: Make it look like the one in the book)

Make a list of all commands that can be called from one file, grooby.rb.
	REACHED: 20 July 2012 9:00 pm
	UPDATED: -- ---- ------- (TODO: Data model and visual model run at once)

Generate a stochastic system
	REACHED: 31 July 2012 12:35 pm (two subrules)
	UPDATED: -- ---- ------- (TODO: 3 subrules, and 1-subruled rules that can be skipped)
	UPDATED: -- ---- ------- (TODO: n subrules)

Generate a stochastic system that produces deterministic results given a seed
	REACHED: 31 July 2012 1:06 pm
	
Generate a context-sensitive system that maintains the stochastic determinism described in the last milestone.
	REACHED: 01 Aug 2012 0:57 am ( Only for 100%-probability rules. May not reach 
	through brackets, but I haven't seen any examples of or a 
	rationale for cross-bracket gsubbing. )
	UPDATED: 01 Aug 2012 1:03 am ( Still may not do cross-bracket aka downbranch gsubbing. Not sure. Haven't tested that. )
	UPDATED: -- ---- --------- (Add an ignore-brackets to regex next to pred in gsub)

Generate a parametric system that maintains the deterministic stochastic and context-sensitivity described in the last milestone.
	REACHED: -- ---- -------

Generate a production word every class of general l-system from axiom, productions, steps, angle
DOL-Systems (deterministic and context-free)
stochastic OL-Systems
IL-systems / (k,l)-systems
	OL-systems (no context)
	1L-systems (one-sided context)
	2L-systems (two-sided context)

	REACHED: 01 Aug 2012 1:03 am
	

Include the bezier development of petals and organs.
	REACHED: 

Allow leaves and other components to drop off at a certain point. Using the cut symbol "%"
	REACHED: 
	
Allow specification of contraction ratios and branching angles.
	REACHED:
	
Include phototropism, gravity, elasticity vectors.
	REACHED:

Make a GUI'd L-system builder
	REACHED:


Build a productions database that uses plant data as a basis for the model, and cross-checks generated models against experimental data.
	REACHED:


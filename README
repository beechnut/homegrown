*
* Homegrown
*       v0.1 "hiver"
*
*  The Ruby-Processing app for generating plant models
*  driven by Lindenmayer Systems (L-Systems)
*

----- Installation -----

These instructions are for Mac OS X with Ruby 1.8.7 only.

1. Download the repository 'grooby' to your computer.

2. Install ruby-processing. Run Terminal.app ($ denotes prompt - don't type '$') and enter

		$ sudo gem install ruby-processing
	
   and enter your password at the prompt.

3. In Terminal, navigate to the repository. If you downloaded the folder 'grooby' into your Documents folder, to navigate into 'grooby/tests' (where the run file is located), type

		$ cd ~/Documents/grooby/tests

4. Run the program by typing

		$ rp5 run history_tree_test.rb
		
5. To advance the tree in age, click the forward button. To reverse age it, click the reverse button. Manipulate branches by clicking a node, moving it to where you want it, and releasing it. Note, angle calculations are still buggy, so you may need to click in the wrong spot to get it to snap to the right spot.

6. To move the camera, well, first, don't expect to be able to manipulate after you've moved the camera. The buttons and nodes kind of don't work afterwards. But, to move:

		W  tilt up			E  truck forward
		S  tilt down		D  truck backward

7. NOTE: The following will only make sense to you if you've studied Lindenmayer Systems. To edit the rules used in the Lindenmayer System, open models/tree.rb in a text editor. You'll see the following lines:

	53|	@a = Rule.new( nil, nil, "F", nil, 1, "F[+F]F[-F]F" )
	54|	@b = Rule.new( nil, nil, "X", nil, 1, "FF" )
	55|	@rules = [ @a, @b ]
	
To add a rule, make a new instance variable and follow the syntax. Make sure 'nil' takes arguments 1, 2, and 4. Argument 3 is the predecessor, argument 5 is the probability [0..1], and argument 6 is the successor.

For example, to add the rule F =(0.8)=> FF, the code would look like this:

	53|		@a = Rule.new( nil, nil, "F", nil, 1, "F[+F]F[-F]F" )
	54|		@b = Rule.new( nil, nil, "X", nil, 1, "FF" )
	55| 	@c = Rule.new( nil, nil, "F", nil, 0.8, "FF" ) # new rule, assign to @c
	55|		@rules = [ @a, @b, @c ] #added @c to the array of rules

The axiom is set, for some reason, in history_tree_test.rb. Make sure the axiom is surrounded by square brackets as in the below example. Some of the logic currently depends on it.

	130|	@tc = TreeController.new("[F]")


----- Release Plans -----

Nov 14: v0.2 "primavera"
	+ support for multiple trees, grafting, and secure positioning
	+ massive upgrade to interpretation library to accommodate
	  flowers, leaves, and chemical signal processing
	+ editing and displaying in 3D
	+ more photorealistic
	+ easy mouse-based camera control
	+ available as standalone application

Dec 14: v0.3 "verano"
	+ phototropism and environmental reactions
	+ selection of pre-constructed, true-to-life L-Systems
	+ Sketchup plugin
	+ Public API

Undetermined: v1.0 "autumn"
	+ installation of organic architecture features like doors, windows, and membranes
	+ outputs .obj and .3ds



----- Goals and Milestones -----

Generate a production word from an axiom and a set of productions, n steps.
	REACHED: 18 July 2012 2:28 am

Generate a bracketed (to be branched) production word from an axiom and a set of productions, n steps.
	REACHED: 18 July 2012 2:28 am (same program, brackets don't make a difference in rewriting yet)

Display a 2D model based on a word.
	REACHED: 18 July 2012 11:55 am (only rotates in one direction),
	UPDATED: 18 July 2012 12:18 pm (rotates in multiple directions)

Display a 3D model based on a word.
	REACHED: 18 July 13:45 pm (not looking great yet but it does produce 3D)
	UPDATED: -- ---- ------- (TODO: Make it look like the one in the book)

Make a list of all commands that can be called from one file, grooby.rb.
	REACHED: 20 July 2012 9:00 pm
	UPDATED: -- ---- ------- (TODO: Data model and visual model run at once)

Generate a stochastic system
	REACHED: 31 July 2012 12:35 pm (two subrules)
	UPDATED: -- ---- ------- (TODO: 3 subrules, and 1-subruled rules that can be skipped)
	UPDATED: -- ---- ------- (TODO: n subrules)

Generate a stochastic system that produces deterministic results given a seed
	REACHED: 31 July 2012 1:06 pm
	
Generate a context-sensitive system that maintains the stochastic determinism described in the last milestone.
	REACHED: 01 Aug 2012 0:57 am ( Only for 100%-probability rules. May not reach 
	through brackets, but I haven't seen any examples of or a 
	rationale for cross-bracket gsubbing. )
	UPDATED: 01 Aug 2012 1:03 am ( Still may not do cross-bracket aka downbranch gsubbing. Not sure. Haven't tested that. )
	UPDATED: -- ---- --------- (Add an ignore-brackets to regex next to pred in gsub)

Generate a parametric system that maintains the deterministic stochastic context-sensitivity described in the last milestone.
	REACHED: -- ---- -------

Generate a production word every class of general l-system from axiom, productions, steps, angle
DOL-Systems (deterministic and context-free)
stochastic OL-Systems
IL-systems / (k,l)-systems
	OL-systems (no context)
	1L-systems (one-sided context)
	2L-systems (two-sided context)

	REACHED: 01 Aug 2012 1:03 am


Make the plant manipulable.*
	REACHED: 

Make the plant manipulable through time.*
	REACHED: 	

Make a GUI'd L-system builder
	REACHED: 16 Aug 2012 10:25 am (not context-sensitive, alphabet not built here mostly)
	UPDATED:  ( context-sensitive, build alphabet here, presets )

Include the bezier development of petals and organs.
	REACHED: 

Allow leaves and other components to drop off at a certain point. Using the cut symbol "%"
# based on PhD dissert
	REACHED: 
	
Allow specification of contraction ratios and branching angles.
	REACHED: 
	
Include phototropism, gravity, elasticity vector influence.
	REACHED: 

Include self-shading avoidance, which might be phototropism, or it might not.
	REACHED: 
 
Build a productions database that uses plant data as a basis for the model, and cross-checks generated models against experimental data.
	REACHED:

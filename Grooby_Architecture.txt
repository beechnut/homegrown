NAMES
Arbortect
Homegrown



PURPOSE
To make it easy to visualize 3D Lindenmayer Systems and manipulate them into architectural structures.
To advance organic architecture, rapidly iterate models, and support grant proposals
	with professional-looking images.
Enable the easier development of true-to-life L-Systems through accurate visualization.

GOAL
Description of an Oct 14 finished state, 0.0.1 :
	# Take in an axiom and rules to generate a word.
	# System has manipulable branches with manipulations reflected in later generations.
	# Manipulable only in 2D.
	# Generations are traversable (you can see the growth over time) via buttons.
	# Only accepted characters for now: F X + - [ ] 
	Branches contract at higher orders and { trunk gets larger as it ages }.
	{ Camera can pan and zoom. }
	{ HSB 100 }
	Mildly photorealistic in terms of color.
	Styles all push and pop.
	Thorough documentation.

Description of a Nov 14 0.0.2 :
	Manipulable in 3D
	Camera can rotate.
	Adaptive cylinder drawing becomes less fine as generations or nodes increase.
	Grove - multiple trees on the timeline, in the scene.
	Graftable - trees can be grafted together, and scions can be added along branches.
	Prunable - trees can be cut manually, or incorporate
	Bezier curves for branches
	Massive upgrade to character set, to incorporate 3D rotation, flowering, leafing, cutting, signal processing
	Thorough documentation.
	Self-contained applet.


Description of a Dec 14 0.0.3 :
	Parametric L-Systems supported.
	Tree selector.
	Crisp, intuitive GUI.
	Thorough documentation.


LIST OF MVC

MODEL		CONTROLLER				VIEW									STATUS
Node		NodeController			Imager									| NOM
History		HistoryController		Timeline								| NOM
Word		WordController			(represented as Node)					| NOM
Alphabet	AlphabetController		(AlphaBuilder, eventually)				| NOM
Rule		RuleController			(RuleBuilder, eventually)				| UNI
GUI			GUIController			Button Panels							| ---
Tree		TreeController			in the editor							| NOM
Branch		BranchController		in the tree								| NOM


NOM = Nominal, model and controller fine
N|- = Nominal model, Untested controller
-|N = Untested model, Nominal controller
--- = Untested / not ready
FLD = Failed / not ready
RTH = Failed, Rethink / not ready
FIN = Finished Model, Controller, and View
UNI = Unimplemented but pretty much good to go






Rotation & dragging a little buggy, angle not calculating correctly.
Next steps: - try inline cylinder module
				-- ask Jeremy Ashkenas about Cylinder module
			- historical tree. 
			
When there's time: refactor so that TreeController has all the control,
instead of Tree, which is what's happening now. It's annoying.



Classes and Modules


class Node
	# Represents a branchpoint, either initial or terminal.
	# Displays differently pop vs push.
	# Highlights when mouse is moved near.
	# Is draggable, and informs the WordController's insert of rotational characters.
end


class NodeController < Processing::Proxy
	# checks the nodes for interactions, like clicks
end

History
	arrays that hold history information:
		generations
		modifications
	brings along a HistoryController - you can't do ish without it
end

HistoryController
	adding and removing and changing History arrays
	functions like add_word(word)
end

Word
	PRIME DIRECTIVE: stores the generated word
end

WordController
	PRIME DIRECTIVE: manipulates the word
	can rewrite words based on rules, make changes, store in history
	uses generate.rb
	functions like add_after(letters, substring position in front of which to insert)
	functions like replace_multiples_at( char to replace, position of a char in the group, number to replace with ) 
	get_branch_at( string_position_or_array_position_attached_to_node )
	
	NEEDS: error catching: for loops, validation so it doesn't search outside of a string
	
end

Alphabet
	stores letters and how they are translated into graphics
end

AlphabetController
	modifies Alphabet by adding and removing rules
end

Rule
	stores information to be used by WordController in generating a word
	mostly 
end

RuleController
	helps with building rules
end

InteractionController
	manages any time a mouse interacts with the screen
		should be inherited by tools: Pan, Rotate, Grab, Graft
	how did the Drawing Editor in Java do it? Look at old mac.
end

Tree
	has a word with a history, nodes, drawing options
end

TreeController
	draws the trees, next_generation { next_gen_word, update_app_view }, prev gen

	when drawing the branches, use	
	cylinder_to(node1, node2)
	NO TO MUCH OF BELOW
		rotate atan( node2, node1 )
		the vormplus cylinder( sides, radius, radius * contraction, dist(node2,node1) )
		inside vormplus' code, inside beginShape(), do the texture cylinder thing
		 of using texture(img) of bark
end


Editor
	contains Tree, Tools, Button
end


### ANOTHER UPGRADE

PlantMatter
	Branch < PlantMatter
	Petal < PlantMatter
	Leaf < PlantMatter

Graftable -- add branch
Graftable -- 2 nodes can be secured together
Multiple Plants
Walkthrough Path = let camera move along a path
coordinate system & planes listed in 3d modeling abbrevs in wikipedia

Grove
	for multiple trees. this will not be for the Oct thing
end

GroveController
	for multiple trees. this will not be for the Oct thing
end